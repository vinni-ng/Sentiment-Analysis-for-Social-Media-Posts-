# -*- coding: utf-8 -*-
"""Sentiment_Analysis_for_Social_Media_Posts

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nc2-4ic62yQscp1LFvU27gqhnJ6dVZmq
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

# Data Collection
train_data_path = "/content/training.1600000.processed.noemoticon.csv"
test_data_path = "/content/testdata.manual.2009.06.14.csv"

train_df = pd.read_csv(train_data_path, encoding='latin-1', header=None, names=["target", "id", "date", "flag", "user", "text"])
test_df = pd.read_csv(test_data_path, encoding='latin-1', header=None, names=["target", "id", "date", "flag", "user", "text"])

# Data Preprocessing
def preprocess_text(text):
    # Remove special characters and convert to lowercase
    text = text.lower()
    text = ' '.join(word for word in text.split() if not word.startswith('http')) # remove links
    text = ''.join(char for char in text if char.isalnum() or char.isspace()) # remove special characters except space
    return text

train_df['text'] = train_df['text'].apply(preprocess_text)
test_df['text'] = test_df['text'].apply(preprocess_text)

# Labeling (assuming '0' for negative sentiment and '4' for positive sentiment)
def label_sentiment(target):
    if target == 0:
        return "negative"
    elif target == 4:
        return "positive"
    else:
        return "neutral"

train_df['sentiment'] = train_df['target'].apply(label_sentiment)
test_df['sentiment'] = test_df['target'].apply(label_sentiment)

# Feature Extraction
tfidf_vectorizer = TfidfVectorizer(max_features=5000)
X_train = tfidf_vectorizer.fit_transform(train_df['text'])
X_test = tfidf_vectorizer.transform(test_df['text'])
y_train = train_df['sentiment']
y_test = test_df['sentiment']

# Model Selection
model = MultinomialNB()

# Model Training
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Save the model and TF-IDF vectorizer
joblib.dump(model, "sentiment_analysis_model.pkl")
joblib.dump(tfidf_vectorizer, "tfidf_vectorizer.pkl")

